// start by thinking about the smallest item/unit in your grid
// then you know you have to create a grid that is that specific in size
// use this approach to get your shortest row and thinnest column size
// then we can go nuts with the spanning
// the more columns and rows, the more complex your gallery grid can get
// and more variety in sizes and shapes
//! and we can use object-fit to get img to conform to grid placement

.gallery {
  background-color: $color-grey-dark-1;
  grid-column: full-start / full-end;
  // we'll make an 8 by 7 grid
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  // height is directly tied to the viewport width, so we'll use vw
  grid-template-rows: repeat(7, 5vw);
  grid-gap: 1.5rem;
  padding: 1.5rem;

  &__img {
    width: 100%;
    height: 100%;
    // object-fit requires that you manually set the width and height
    object-fit: cover;
    display: block; // to eliminate that inline white-space
  }

  &__item {
    // position items
    &--1 {
      grid-row: 1 / span 2;
      grid-column: 1 / span 2;
    }
    &--2 {
      grid-row: 1 / span 3;
      grid-column: 3 / span 3;
    }
    &--3 {
      grid-row: 1 / span 2;
      grid-column: 6 / span 1;
    }
    &--4 {
      grid-row: 1 / span 2;
      grid-column: 7 / span 2;
    }
    &--5 {
      grid-row: 3 / span 3;
      grid-column: 1 / span 2;
    }
    &--6 {
      grid-row: 4 / span 2;
      grid-column: 3 / span 2;
    }
    &--7 {
      grid-row: 4 / span 1;
      grid-column: 5 / span 1;
    }
    &--8 {
      grid-row: 3 / span 2;
      grid-column: 6 / span 2;
    }
    &--9 {
      grid-row: 3 / span 3;
      grid-column: 8 / span 1;
    }
    &--10 {
      grid-row: 6 / span 2;
      grid-column: 1 / span 1;
    }
    &--11 {
      grid-row: 6 / span 2;
      grid-column: 2 / span 2;
    }
    &--12 {
      grid-row: 6 / span 2;
      grid-column: 4 / span 1;
    }
    &--13 {
      grid-row: 5 / span 3;
      grid-column: 5 / span 3;
    }
    &--14 {
      grid-row: 6 / span 2;
      grid-column: 8 / span 1;
    }
  }
}
